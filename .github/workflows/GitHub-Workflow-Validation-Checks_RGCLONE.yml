name: GitHub - Pipeline Validation Workflow

on:
  pull_request:
    branches:
      - release
  schedule:
    - cron: "0 3 * * *"  # Runs at 3 AM UTC every night

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  setup-validation-environment:
    name: Spin Up RGClone Validation Container
    runs-on: "self-hosted"
    env:
      DATA_IMAGE_NAME: "AutoPilot-Flyway-MSSQL"
      DATA_CONTAINER_NAME: "Autopilot-GitHub-Actions-Build-Validate_MSSQL-${{ github.run_number }}"
      PROXY_PORT: "1433"
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install rgclone CLI
        id: installCLI
        env:
          RGCLONE_API_ENDPOINT: ${{ secrets.RGCLONE_API_ENDPOINT }}
          RGCLONE_ACCESS_TOKEN: ${{ secrets.RGCLONE_ACCESS_TOKEN }}
        run: |
          # Define variables
          downloadUrl="${RGCLONE_API_ENDPOINT}cloning-api/download/cli/linux-amd64"
          zipFile="./rgclone.zip"
          rgCloneLocation="."
      
          echo "  Downloading rgclone CLI zip file..."
          echo "    from: $downloadUrl"
          echo "    to:   $zipFile"
      
          # Download the file
          curl -H "Authorization: Bearer $RGCLONE_ACCESS_TOKEN" -L "$downloadUrl" -o "$zipFile"
      
          echo "  Extracting zip to: $rgCloneLocation"
      
          # Extract the zip file
          unzip -o "$zipFile" -d "$rgCloneLocation"
      
          # Make rgclone executable
          chmod +x ./rgclone

      - name: Validate Data Image
        id: createDataImage
        env:
          RGCLONE_API_ENDPOINT: ${{ secrets.RGCLONE_API_ENDPOINT }}
          RGCLONE_ACCESS_TOKEN: ${{ secrets.RGCLONE_ACCESS_TOKEN }}
        run: |
          output=$(./rgclone get di "$DATA_IMAGE_NAME" --ignore-not-found -o json)

          if [[ -z "$output" ]]; then
              echo "Image does not exist. Creating image..."
          else
              echo "Image already exists. Moving on..."
          fi

      - name: Create data container
        id: createDc
        env:
          RGCLONE_API_ENDPOINT: ${{ secrets.RGCLONE_API_ENDPOINT }}
          RGCLONE_ACCESS_TOKEN: ${{ secrets.RGCLONE_ACCESS_TOKEN }}
        run: |
          # Spin up a Data Container for chosen Image
          echo "Creating data container"
          
          output=$(./rgclone create dc -n "$DATA_CONTAINER_NAME" -i "$DATA_IMAGE_NAME" -t 20m -o json)
          
          # Parse JSON output using jq
          dbUser=$(echo "$output" | jq -r '.user')
          dbPassword=$(echo "$output" | jq -r '.password')
          sqlhost=$(echo "$output" | jq -r '.host')
          sqlport=$(echo "$output" | jq -r '.port')
          instance="${sqlhost},${sqlport}"
      
          echo "Data container created successfully and available at: $instance"
      
          # Set output values for use in subsequent steps
          echo "dbUser=$dbUser" >> "$GITHUB_ENV"
          echo "dbPassword=$dbPassword" >> "$GITHUB_ENV"
          echo "instance=$instance" >> "$GITHUB_ENV"
        
      - name: Create Local Proxy for Container
        id: createProxy
        env:
          RGCLONE_API_ENDPOINT: ${{ secrets.RGCLONE_API_ENDPOINT }}
          RGCLONE_ACCESS_TOKEN: ${{ secrets.RGCLONE_ACCESS_TOKEN }}
        run: |
          # Create Data Container Proxy
          echo "Creating Data Container Proxy"
          
          rgclone proxy dc "$DATA_CONTAINER_NAME" -p "$PROXY_PORT"

  Validate-Flyway-Pipeline:
    name: Run Flyway Pipeline
    needs: setup-validation-environment
    uses: ./.github/workflows/GitHub-Flyway-CICD-Pipeline_Linux.yml
    secrets: inherit  # Inherit existing secrets but allow environment overrides

